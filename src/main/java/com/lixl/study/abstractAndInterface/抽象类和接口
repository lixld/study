
抽象类----[就是类，只不过是一种特殊的类]
1.不允许被实例化，只能被继承。也就是说，你不能 new 一个抽象类的对象出来（Logger logger = new Logger(…); 会报编译错误）。

2.抽象类可以包含属性和方法。
方法既可以包含代码实现（比如 Logger 中的 log() 方法），也可以不包含代码实现（比如 Logger 中的 doLog() 方法）。不包含代码实现的方法叫作抽象方法。

3.子类继承抽象类，必须实现抽象类中的所有抽象方法。对应到例子代码中就是，所有继承 Logger 抽象类的子类，都必须重写 doLog() 方法。
继承关系是一种 is-a 的关系



抽象列的实现还是比较优雅的：原因如下：
1.在Logger中定义个空的方法，有点让不清楚代码逻辑的人摸不着头脑
2.继续类中很可能忘记了重新log()方法
3.Logger可以被实例化，也就是可以new出来并调用它的空方法log().增加了类被误用的方法，
虽然可以用私有构造器来解决，可是依然不够优雅


接口都有哪些特性。我也总结了三点。
1.接口不能包含属性（也就是成员变量）。
2.接口只能声明方法，方法不能包含代码实现。
3.类实现接口的时候，必须实现接口中声明的所有方法。
接口表示一种 has-a 关系 表示具有某些功能。
有一个更加形象的叫法，那就是协议（contract）

思考A：抽象类来模拟接口
其实很简单，只要抽象类如下操作即可
1.没有属性
2.方法都是抽象的就好

思考B：普通类来模拟接口
1.没有属性
2.protected的构造函数,避免实例化
3.方法throw MethodUnsupportedException()异常

------------------------------------基于接口而非实现编程-----------------------------------------

这条原则能非常有效地提高代码质量，
可以将接口和实现相分离，封装不稳定的实现，暴露稳定的接口。
我们在做软件开发的时候，一定要有抽象意识、封装意识、接口意识。
在接口定义的时候，不要暴露任何实现细节。。接口定义只表明做什么，而不是怎么做。
而且在接口设计的时候。我们要多思考一下。这样的接口设计是否足够通用？能否做到替换具体的接口的实现的时候，不需要任何接口定义的改动


