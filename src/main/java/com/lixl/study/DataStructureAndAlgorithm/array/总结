数组是一种线性表数据结构。它使用一组连续的内存空间，来存储一组具有相同类类型的数据。

线性表：每个线性表上的数据只能有前和后两个方向。除了数组，链表，队列，栈也是线性表结构。
非线性表：如二叉树、堆、图  在非线性表中数据之间并不是简单的前后关系

连续的内存空间 和 相同的数据类型 ，正式因为这两个限制，它才有了一个堪称"杀手锏"的特性："随机访问"
当时也是因为这两特性导致数组的很多操作变的低效。比如，要想在数组中删除、插入一个数据，为了保证联系性，需要做大量的数据搬移工作。


计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。
当计算机需要随机访问数据中某个元素时，会首先通过下面的选择公式，计算出该元素的内存地址：
a[i]_address = base_address+i*data_type_size; 其中data_type_size为数组中每个元素的大小 如int 为 4

纠正一个错误说法：“链表适合插入、删除，时间复杂度 O(1)；数组适合查找，查找时间复杂度为 O(1)”。
数组是适合查找操作，但是查找的时间复杂度并不为 O(1)。即便是排好序的数组，你用二分查找，时间复杂度也是 O(logn)。所以，
正确的表述应该是，数组支持随机访问，根据下标随机访问的时间复杂度为 O(1)。

------------------------------------------------------------
插入数据
如果数组中的数据是有序的，我们在某个位置插入一个新的元素时，就必须按照刚才的方法搬移 k 之后的数据。
但是，如果数组中存储的数据并没有任何规律，数组只是被当作一个存储数据的集合。
在这种情况下，如果要将某个数据插入到第 k 个位置，为了避免大规模的数据搬移，我们还有一个简单的办法就是，
直接将第 k 位的数据搬移到数组元素的最后，把新的元素直接放入第 k 个位置。

删除数据
我们继续来看例子。数组 a[10]中存储了 8 个元素：a，b，c，d，e，f，g，h。现在，我们要依次删除 a，b，c 三个元素。

为了避免 d，e，f，g，h 这几个数据会被搬移三次，我们可以先记录下已经删除的数据。每次的删除操作并不是真正地搬移数据，只是记录数据已经被删除。
当数组没有更多空间存储数据时，我们再触发执行一次真正的删除操作，这样就大大减少了删除操作导致的数据搬移。

如果你了解 JVM，你会发现，这不就是 JVM 标记清除垃圾回收算法的核心思想吗？
没错，数据结构和算法的魅力就在于此，很多时候我们并不是要去死记硬背某个数据结构或者算法，而是要学习它背后的思想和处理技巧，这些东西才是最有价值的。
如果你细心留意，不管是在软件开发还是架构设计中，总能找到某些算法和数据结构的影子。

针对数组类型，很多语言提供了容器类
JAVA语言提供了ArrayList、C++STL中的vector
ArrayList最大优势是可以将很多数组操作的细节封装起来。（如前面提到的数组插入删除操作时需要搬移其他数据）
它还有个优势：就是支持动态扩容

作为高级语言编程者，是不是数组就无用武之地了呢？当然不是，有些时候，用数组会更合适些，我总结了几点自己的经验。
1.ArrayList无法存储基本数据类型：如int、long 需要封装为Integer,Long,而Autoboxing/Unboxing 则有一定的性能消耗，
如果特别关注性能，或者希望使用基本数据类型那考虑使用数据

2.如果数据大小事前已知。并且数据操作简单，并不需要ArrayList提供的大部分方法

3.个人喜好，当要表示多维数组时，用数组更加直观。如Object[][] array;而用容器时则需要这样定义ArrayList<ArrayList<Object>> array;

总结一下，对于业务开发，直接使用容器就足够了，省时省力。毕竟损耗一丢丢性能，完全不会影响到系统整体的性能。但如果你是做一些非常底层的开发，比如开发网络框架，性能的优化需要做到极致，这个时候数组就会优于容器，成为首选。

为什么大多数编程语言中，数组要从 0 开始编号，而不是从 1 开始呢？
从数组存储的内存模型上来看，“下标”最确切的定义应该是“偏移（offset）”。
a[0]就是偏移为 0 的位置，也就是首地址，a[k]就表示偏移 k 个 type_size 的位置，所以计算 a[k]的内存地址只需要用这个公式：

a[k]_address = base_address + k * type_size

但是，如果数组从 1 开始计数，那我们计算数组元素
a[k]的内存地址就会变为：a[k]_address = base_address + (k-1)*type_size
对比两个公式，我们不难发现，从 1 开始编号，每次随机访问数组元素都多了一次减法运算，
对于 CPU 来说，就是多了一次减法指令。
数组作为非常基础的数据结构，通过下标随机访问数组元素又是其非常基础的编程操作，效率的优化就要尽可能做到极致。
所以为了减少一次减法操作，数组选择了从 0 开始编号，而不是从 1 开始。


