模板模式有两大作用：复用和扩展

模板模式作用一：复用
把一个算法中不变的流程抽象到父类的模板方法 templateMethod() 中，
将可变的部分 method1()、method2() 留给子类 ContreteClass1 和 ContreteClass2 来实现。
所有的子类都可以复用父类中模板方法定义的流程代码。我们通过两个小例子来更直观地体会一下。

Java IO 类库中，有很多类的设计用到了模板模式，比如 InputStream、OutputStream、Reader、Writer。我们拿 InputStream 来举例说明一下
在模板模式经典的实现中，模板方法定义为 final，可以避免被子类重写。
需要子类重写的方法定义为 abstract，可以强迫子类去实现。
不过，在实际项目开发中，模板模式的实现比较灵活，以上两点都不是必须的。
长用在框架开发中。。。。


回调（Callback）
相对于普通的函数调用来说，回调是一种双向调用关系
A 类事先注册某个函数 F 到 B 类，
A 类在调用 B 类的 P 函数的时候，
B 类反过来调用 A 类注册给它的 F 函数。
这里的 F 函数就是“回调函数”。
A 调用 B，B 反过来又调用 A，这种调用机制就叫作“回调”。
